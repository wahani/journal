<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Simulation | Journal]]></title>
  <link href="http://wahani.github.io/journal/blog/categories/simulation/atom.xml" rel="self"/>
  <link href="http://wahani.github.io/journal/"/>
  <updated>2015-04-07T17:18:57+02:00</updated>
  <id>http://wahani.github.io/journal/</id>
  <author>
    <name><![CDATA[Sebastian Warnholz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[saeSim: Simulation Tools in Small Area Estimation]]></title>
    <link href="http://wahani.github.io/journal/blog/2014/06/03/Simulations-in-Small-Area-Estimation"/>
    <updated>2014-06-03T00:00:00+02:00</updated>
    <id>http://wahani.github.io/journal/blog/2014/06/03/Simulations-in-Small-Area-Estimation</id>
    <content type="html"><![CDATA[<p>In this post I want to introduce the package <a href="/saeSim">saeSim</a>. The package improved my set-up of design-based and model-based simulation scenarios in the context of Small Area Estimation. It introduces components with which the flow of the simulation is framed and supports a unified structure and interface between each step.</p>

<!--more-->

<h2 id="general-idea-and-workflow">General idea and workflow</h2>
<p>As I was writing my scripts for simulation I typically ended up using loop structures every second line. Every time I wanted to add or change something, I appended new lines to the script which then needed to iterate over my data. Consider a simple task: Predict a population mean and compare the bias of a linear model and sample average. Repeat this 100 times. The task is clear, simulate 100 populations, compute the mean in each population, draw a sample from each population apply the two models on the samples and estimate the population mean.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="kn">library</span><span class="p">(</span>reshape2<span class="p">)</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>

<span class="o">&lt;</span>h1 id<span class="o">=</span><span class="s">&quot;generate-data&quot;</span><span class="o">&gt;</span>Generate data<span class="o">&lt;/</span>h1<span class="o">&gt;</span>
<span class="o">&lt;</span>p<span class="o">&gt;</span>dataList <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kp">replicate</span><span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="p">{</span>
  dat <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kt">data.frame</span><span class="p">(</span>x <span class="o">=</span> rnorm<span class="p">(</span><span class="m">100</span><span class="p">),</span> e <span class="o">=</span> rnorm<span class="p">(</span><span class="m">100</span><span class="p">))</span>
  dat<span class="o">$</span>y <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="m">100</span> <span class="o">+</span> <span class="m">2</span> <span class="o">*</span> dat<span class="o">$</span>x <span class="o">+</span> dat<span class="o">$</span>e
  dat
<span class="p">},</span> simplify <span class="o">=</span> <span class="kc">FALSE</span><span class="p">)</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>

<span class="o">&lt;</span>h1 id<span class="o">=</span><span class="s">&quot;population-mean&quot;</span><span class="o">&gt;</span>population <span class="kp">mean</span><span class="o">&lt;/</span>h1<span class="o">&gt;</span>
<span class="o">&lt;</span>p<span class="o">&gt;</span>dataList <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kp">lapply</span><span class="p">(</span>dataList<span class="p">,</span> <span class="kr">function</span><span class="p">(</span>dat<span class="p">)</span> <span class="p">{</span>
  dat<span class="o">$</span>popMean <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kp">mean</span><span class="p">(</span>dat<span class="o">$</span>y<span class="p">)</span>
  dat
<span class="p">})</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>

<span class="o">&lt;</span>h1 id<span class="o">=</span><span class="s">&quot;draw-a-sample&quot;</span><span class="o">&gt;</span>Draw a <span class="kp">sample</span><span class="o">&lt;/</span>h1<span class="o">&gt;</span>
<span class="o">&lt;</span>p<span class="o">&gt;</span>dataList <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kp">lapply</span><span class="p">(</span>dataList<span class="p">,</span> <span class="kr">function</span><span class="p">(</span>dat<span class="p">)</span> dat<span class="p">[</span><span class="kp">sample.int</span><span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="m">20</span><span class="p">),</span> <span class="p">])</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>

<span class="o">&lt;</span>h1 id<span class="o">=</span><span class="s">&quot;apply-model-and-make-prediction&quot;</span><span class="o">&gt;</span>Apply model and make prediction<span class="o">&lt;/</span>h1<span class="o">&gt;</span>
<span class="o">&lt;</span>p<span class="o">&gt;</span>dataList <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kp">lapply</span><span class="p">(</span>dataList<span class="p">,</span> <span class="kr">function</span><span class="p">(</span>dat<span class="p">)</span> <span class="p">{</span>
  fancyModel <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> lm<span class="p">(</span>y <span class="o">~</span> x<span class="p">,</span> data <span class="o">=</span> dat<span class="p">)</span>
  out <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kt">data.frame</span><span class="p">(</span>
    lm <span class="o">=</span> predict<span class="p">(</span>fancyModel<span class="p">,</span> <span class="kt">data.frame</span><span class="p">(</span>x <span class="o">=</span> <span class="kp">mean</span><span class="p">(</span>dat<span class="o">$</span>x<span class="p">))),</span>
    mean <span class="o">=</span> <span class="kp">mean</span><span class="p">(</span>dat<span class="o">$</span>y<span class="p">),</span>
    popMean <span class="o">=</span> <span class="kp">mean</span><span class="p">(</span>dat<span class="o">$</span>popMean<span class="p">)</span>
    <span class="p">)</span>
  out
<span class="p">})</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>

<span class="o">&lt;</span>p<span class="o">&gt;</span>dat <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kp">do.call</span><span class="p">(</span><span class="kp">rbind</span><span class="p">,</span> dataList<span class="p">)</span>
dat<span class="o">$</span>biasLm <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> dat<span class="o">$</span>lm <span class="o">-</span> dat<span class="o">$</span>popMean
dat<span class="o">$</span>biasMean <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> dat<span class="o">$</span>mean <span class="o">-</span> dat<span class="o">$</span>popMean<span class="o">&lt;/</span>p<span class="o">&gt;</span>

<span class="o">&lt;</span>p<span class="o">&gt;</span>datEval <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> melt<span class="p">(</span>dat<span class="p">[</span><span class="kt">c</span><span class="p">(</span>“biasLm”<span class="p">,</span> “biasMean”<span class="p">)])</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## No id variables; using all as measure variables</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r">boxplot<span class="p">(</span>value <span class="o">~</span> variable<span class="p">,</span> data <span class="o">=</span> datEval<span class="p">,</span> horizontal<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span></code></pre></div></p>

<p><img src="http://wahani.github.io/journal/images/images/2014-06-03-Simulations-in-Small-Area-Estimation/unnamed-chunk-1-1.png" title="center" alt="center" width="100%" /></p>

<p>Imagine this style of writing with more complex data and models and hundreds or thousands of lines of code. Reproducing yourself is a mess, let alone find bugs, mistakes, etc. Another issue is that a lot of effort is needed to parallelize the computation. I would need to replace every looping structure with a parallel version. And furthermore the real task is shadowed by all kinds of unnecessary control structures. The idea to overcome this was to write one function which would do the data generation and computation on that data. That would lead only to one loop and to a potentially long function for simulation – although it is not a problem to split the task step-wise into smaller functions which would be called in the ‘main’ simulation function. In the end this is what I tried with saeSim. I identified the repeating steps and built a framework so I can easily set-up simulations without thinking about the structure and more about the statistical problem.</p>

<h2 id="a-simsetup">A sim_setup</h2>
<p>In all I have 6 steps I can part my simulation into.</p>

<ul>
  <li>data generation: <code>sim_gen()</code></li>
  <li>computing on the population: <code>sim_calc(., level = "population")</code></li>
  <li>drawing samples: <code>sim_sample()</code></li>
  <li>computing on the sample: <code>sim_calc(., level = "sample")</code></li>
  <li>aggregating the data (area level information): <code>sim_agg()</code></li>
  <li>finally computing on the aggregates: <code>sim_calc(., level = "agg")</code></li>
</ul>

<p>The purpose of these functions is simply to control the flow of the simulation and they all take a function as argument. In other words all of these functions control <em>when</em> a function is called – you can decide which function that will be. Let’s see how things add up for a simple data generation scenario:</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># devtools::install_github(“wahani/saeSim”)</span>
<span class="kn">library</span><span class="p">(</span>saeSim<span class="p">)</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## Loading required package: methods
## Documentation is available at wahani.github.io/saeSim</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Generating a population with 100 domains and 100 units in each domain:</span>
setup <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> base_id<span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="m">100</span><span class="p">)</span> <span class="o">%&amp;gt;%</span>
  <span class="c1"># Variable x and error component e</span>
  sim_gen_x<span class="p">(</span>sd <span class="o">=</span> <span class="m">1</span><span class="p">)</span> <span class="o">%&amp;gt;%</span>
  sim_gen_e<span class="p">(</span>sd <span class="o">=</span> <span class="m">1</span><span class="p">)</span> <span class="o">%&amp;gt;%</span>
  sim_resp_eq<span class="p">(</span>y <span class="o">=</span> <span class="m">100</span> <span class="o">+</span> <span class="m">2</span> <span class="o">*</span> x <span class="o">+</span> e<span class="p">)</span></code></pre></div></p>

<p>To inspect <code>setup</code> I have a <code>plot</code>, <code>autoplot</code>, <code>summary</code> and <code>show</code> method.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r">setup</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##   idD idU          x          e         y
## 1   1   1  0.3153918 -0.7025133  99.92827
## 2   1   2  0.1968682 -1.0272020  99.36653
## 3   1   3 -2.2219992 -1.5642642  93.99174
## 4   1   4  1.9272049  2.3189092 106.17332
## 5   1   5  0.4566154 -0.7306165 100.18261
## 6   1   6  1.0991948  0.2066723 102.40506</code></pre></div></p>

<p>Note that the response ‘y’ will always be constructed automatically. To visualize the data, the plot method will always try to find ‘y’ and plot it against the first variable found.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r">plot<span class="p">(</span>setup<span class="p">)</span></code></pre></div></p>

<p><img src="http://wahani.github.io/journal/images/images/2014-06-03-Simulations-in-Small-Area-Estimation/unnamed-chunk-4-1.png" title="center" alt="center" width="100%" /></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># What happens if I add contamination to the error:</span>
plot<span class="p">(</span>setup <span class="o">%&amp;gt;%</span> sim_gen_ec<span class="p">())</span></code></pre></div></p>

<p><img src="http://wahani.github.io/journal/images/images/2014-06-03-Simulations-in-Small-Area-Estimation/unnamed-chunk-4-2.png" title="center" alt="center" width="100%" /></p>

<p>In contrast the <code>autoplot</code> function will use ggplot2 and will plot a two dimensional density estimate, very much like <code>smoothScatter</code>.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r">autoplot<span class="p">(</span>setup<span class="p">)</span></code></pre></div></p>

<p><img src="http://wahani.github.io/journal/images/images/2014-06-03-Simulations-in-Small-Area-Estimation/unnamed-chunk-5-1.png" title="center" alt="center" width="100%" /></p>

<h2 id="back-to-the-introductory-example">Back to the introductory example</h2>
<p>So how does my scripting change using <code>saeSim</code>. I have some data generation interfaces which are a bit clumsy in this setting, they make my coding clearer in more complex scenarios. My simulation components are connected using the <code>%&amp;%</code> operator. So even complex tasks can be split into several lines to maintain readability. The set-up is separated from the actual repetition, which allows to construct more complex designs and test them easily as I add new steps and components to the scenario.</p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Population with 1 domain and 100 units</span>
setup <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> base_id<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">100</span><span class="p">)</span> <span class="o">%&amp;gt;%</span>
  <span class="c1"># y = 100 + 2*x + e</span>
  sim_gen<span class="p">(</span>gen_norm<span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> “x”<span class="p">))</span> <span class="o">%&amp;gt;%</span>
  sim_gen<span class="p">(</span>gen_norm<span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> “e”<span class="p">))</span> <span class="o">%&amp;gt;%</span>
  sim_resp_eq<span class="p">(</span>y <span class="o">=</span> <span class="m">100</span> <span class="o">+</span> <span class="m">2</span> <span class="o">*</span> x <span class="o">+</span> e<span class="p">)</span> <span class="o">%&amp;gt;%</span>
  <span class="c1"># Keeping the mean of y</span>
  sim_comp_popMean<span class="p">()</span> <span class="o">%&amp;gt;%</span>
  <span class="c1"># Drawing a simple random sample with n = 20</span>
  sim_sample<span class="p">(</span>sample_number<span class="p">(</span><span class="m">20</span><span class="p">))</span> <span class="o">%&amp;gt;%</span>
  <span class="c1"># Computing the estimated parameters</span>
  sim_comp_sample<span class="p">(</span><span class="kr">function</span><span class="p">(</span>dat<span class="p">)</span> <span class="p">{</span>
    fancyModel <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> lm<span class="p">(</span>y <span class="o">~</span> x<span class="p">,</span> data <span class="o">=</span> dat<span class="p">)</span>
    out <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kt">data.frame</span><span class="p">(</span>
      lm <span class="o">=</span> predict<span class="p">(</span>fancyModel<span class="p">,</span> <span class="kt">data.frame</span><span class="p">(</span>x <span class="o">=</span> <span class="kp">mean</span><span class="p">(</span>dat<span class="o">$</span>x<span class="p">))),</span>
      mean <span class="o">=</span> <span class="kp">mean</span><span class="p">(</span>dat<span class="o">$</span>y<span class="p">),</span>
      popMean <span class="o">=</span> <span class="kp">mean</span><span class="p">(</span>dat<span class="o">$</span>popMean<span class="p">)</span>
      <span class="p">)</span>
    out
    <span class="p">})</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>

<span class="o">&lt;</span>p<span class="o">&gt;</span>setup</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">##         lm     mean  popMean
## 1 100.2171 100.2171 100.1091</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># Running the simulation</span>
res <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> sim<span class="p">(</span>setup<span class="p">,</span> R <span class="o">=</span> <span class="m">100</span><span class="p">)</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>

<span class="o">&lt;</span>h1 id<span class="o">=</span><span class="s">&quot;combining-results-as-before&quot;</span><span class="o">&gt;</span>Combining results as before<span class="o">:&lt;/</span>h1<span class="o">&gt;</span>
<span class="o">&lt;</span>p<span class="o">&gt;</span>dat <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kp">do.call</span><span class="p">(</span><span class="kp">rbind</span><span class="p">,</span> res<span class="p">)</span>
dat<span class="o">$</span>biasLm <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> dat<span class="o">$</span>lm <span class="o">-</span> dat<span class="o">$</span>popMean
dat<span class="o">$</span>biasMean <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> dat<span class="o">$</span>mean <span class="o">-</span> dat<span class="o">$</span>popMean
datEval <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> melt<span class="p">(</span>dat<span class="p">[</span><span class="kt">c</span><span class="p">(</span>“biasLm”<span class="p">,</span> “biasMean”<span class="p">)])</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">## No id variables; using all as measure variables</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-r" data-lang="r">boxplot<span class="p">(</span>value <span class="o">~</span> variable<span class="p">,</span> data <span class="o">=</span> datEval<span class="p">,</span> horizontal<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span></code></pre></div></p>

<p><img src="http://wahani.github.io/journal/images/images/2014-06-03-Simulations-in-Small-Area-Estimation/unnamed-chunk-6-1.png" title="center" alt="center" width="100%" /></p>

<h2 id="how-to-get-started">How to get started</h2>
<p>If you have come this far and in the case you are still interested in what this is about, go to the <a href="/saeSim">homepage of saeSim</a>, install the package, checkout the vignette, add comments here or on <a href="https://github.com/wahani/saeSim">GitHub</a>…</p>
]]></content>
  </entry>
  
</feed>
